// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "adder": operands Resource Client
//
// Command:
// $ goagen
// --design=github.com/shogo82148/goa-adder/design
// --out=$(GOPATH)/src/github.com/shogo82148/goa-adder
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddOperandsPath computes a request path to the add action of operands.
func AddOperandsPath(left int, right int) string {
	param0 := strconv.Itoa(left)
	param1 := strconv.Itoa(right)

	return fmt.Sprintf("/add/%s/%s", param0, param1)
}

// leftとrightを足した値をレスポンスボディーに入れて返します
func (c *Client) AddOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAddOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddOperandsRequest create the request corresponding to the add action endpoint of the operands resource.
func (c *Client) NewAddOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteOperandsPath computes a request path to the delete action of operands.
func DeleteOperandsPath() string {

	return fmt.Sprintf("/")
}

// DeleteOperands makes a request to the delete action endpoint of the operands resource
func (c *Client) DeleteOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteOperandsRequest create the request corresponding to the delete action endpoint of the operands resource.
func (c *Client) NewDeleteOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PatchOperandsPath computes a request path to the patch action of operands.
func PatchOperandsPath() string {

	return fmt.Sprintf("/")
}

// PatchOperands makes a request to the patch action endpoint of the operands resource
func (c *Client) PatchOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewPatchOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewPatchOperandsRequest create the request corresponding to the patch action endpoint of the operands resource.
func (c *Client) NewPatchOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PutOperandsPath computes a request path to the put action of operands.
func PutOperandsPath() string {

	return fmt.Sprintf("/")
}

// PutOperands makes a request to the put action endpoint of the operands resource
func (c *Client) PutOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewPutOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewPutOperandsRequest create the request corresponding to the put action endpoint of the operands resource.
func (c *Client) NewPutOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
